{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "smartlang",
	"patterns": [
		{
			"include": "#value"
		},
        {
			"include": "#keywords"
		},
		{
			"include": "#strings"
        },
        {
			"include": "#strings2"
        }

	],
	"repository": {
		"array": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.json"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.json"
				}
			},
			"name": "meta.structure.array.json",
			"patterns": [
				{
					"include": "#value"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.json"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.json"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*\\*(?!/)",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.json"
						}
					},
					"end": "\\*/",
					"name": "comment.block.documentation.json"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.json"
						}
					},
					"end": "\\*/",
					"name": "comment.block.json"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.json"
						}
					},
					"match": "(//).*$\\n?",
					"name": "comment.line.double-slash.smartlang"
				}
			]
		},
		"constant": {
			"match": "\\b(?:true|false|null)\\b",
			"name": "constant.language.json"
		},
		"number": {
			"match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
			"name": "constant.numeric.json"
		},
		"object": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.begin.json"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.end.json"
				}
			},
			"name": "meta.structure.dictionary.json",
			"patterns": [
				{
					"comment": "the JSON object key",
					"include": "#objectkey"
				},
				{
					"include": "#comments"
				},
				{
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "punctuation.separator.dictionary.key-value.json"
						}
					},
					"end": "(,)|(?=\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.separator.dictionary.pair.json"
						}
					},
					"name": "meta.structure.dictionary.value.json",
					"patterns": [
						{
							"comment": "the JSON object value",
							"include": "#value"
						},
						{
							"match": "[^\\s,]",
							"name": "invalid.illegal.expected-dictionary-separator.json"
						}
					]
				},
				{
					"match": "[^\\s\\}]",
					"name": "invalid.illegal.expected-dictionary-separator.json"
				}
			]
		},
		"string": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.json"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.json"
				}
			},
			"name": "string.quoted.double.json",
			"patterns": [
				{
					"include": "#stringcontent"
				}
			]
		},
		"objectkey": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.support.type.property-name.begin.json"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.support.type.property-name.end.json"
				}
			},
			"name": "string.json support.type.property-name.json",
			"patterns": [
				{
					"include": "#stringcontent"
				}
			]
		},
		"stringcontent": {
			"patterns": [
				{
					"match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
					"name": "constant.character.escape.json"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.json"
				}
			]
		},
		"value": {
			"patterns": [
				{
					"include": "#comments"
				}
			],
            "old_patterns": [
				{
					"include": "#constant"
				},
				{
					"include": "#number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#array"
				},
				{
					"include": "#object"
				},
				{
					"include": "#comments"
				}
			]
		},
        "keywords": {
			"patterns": [
                {
                    "name": "keyword.control.smartlang",
                    "match": "\\b(:|if|while|for|return)\\b"
                },
                {
                    "name": "keyword.operator",
                    "match": "\\="
                },
                {
                    "name": "constant.character",
                    "match": "\\$|\\?"
                },
                {
                    "name": "constant.language",
                    "match": "\\b(null|true|false)\\b"
                },
                {
                    "name": "keyword.other",
                    "match": "\\b(class|fn|namespace)\\b"
                },
                {
                    "old": {
                        "name": "entity.name.type.smartlang",
                        "match": "\\b(bool|string|double|float)\\b"
                    }
                },
                {
                    "name": "entity.name.tag.smartlang",
                    "match": "\\b(init)\\b"
                },
                {
                    "namelet": "entity.name.function",
                    "matchlet": "\\b(let)\\b"
                },
                {
                    "name": "keyword.operator.arithmetic.smartlang",
                    "match": "\\;|\\+|-|\\*|/|\\*\\*|\\!"
                },
                {
                    "unused": [
                        {
                            "name_old": "keyword.operator"
                            ,"match_old": "\\="
                        }
                    ]
                }
                ,
                {
                    "name": "entity.name.tag"
                    ,"match": "\\{"
                },
                {
                    "name": "storage.type",
                    "match": "\\b(bool|String|float|double|let|int)\\b"
                },
                {
                    "name":"variable",
                    "match": "[^\\s\\=\"0-9\/][^\\s\\=\"\/]*"
                },
                {
                    "name_old":"support.variable",
                    "match_old": "[^\\s\\=\"0-9][^\\s\\=\"]*"
                },
                {
                    "name":"constant.numeric",
                    "name2":"constant.numeric.smartlang",
                    "match": "[0-9]+"
                }
            ]
		},
		"strings": {
			"name": "string.quoted.double.smartlang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.smartlang",
					"match": "\\\\."
				}
			]
        },
        "strings2": {
			"name": "string.quoted.single.smartlang",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.smartlang",
					"match": "\\\\."
				}
			]
        }
	},
	"scopeName": "source.smt"
}