name: ðŸŒ• CMake Build Matrix

on:
  push:
  schedule:
    - cron: '15 1 1 * *' # minute hour day month monday

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrixJson: ${{ steps.set-matrix.outputs.value }}
    strategy:
      matrix:
        config:
          - {
            unix: {
              bin: "./src/main_run",
              testbin: "./tests/main_tst",
              longrunning_bin: "./tests/long_running/main_tst_long_running",
              lspbin: "./lsp_vscode_server/main_lsp",
              prescript: "export CXX=clang++",
              cmakeConfig: " -D NODOOR32=1 ",
              cmakeBuildConfig: ""
            },
            win: {
              bin: "src/Release/main_run.exe",
              testbin: "tests/Release/main_tst.exe",
              lspbin: "lsp_vscode_server/Release/main_lsp.exe",
              longrunning_bin: "tests/long_running/Release/main_tst_long_running.exe",
              cmakeBuildConfig: "--config Release ",
              prescript: "chcp 65001",
            }
          }
    steps:
      - name: make values
        id: set-matrix
        shell: bash
        run: |
          WinConf=$(cat <<-END
            ${{ toJSON(matrix.config.win) }}
          END)
          Win2022="${WinConf%\}*}, os:\"windows-latest\"";
          Win2019="${WinConf%\}*}, os:\"windows-2019\"";

          UnixConf=$(cat <<-END
            ${{ toJSON(matrix.config.unix) }}
          END)
          UnixConf="${UnixConf%\}*}";

          # https://cmake.org/cmake/help/v3.16/generator/Visual%20Studio%2016%202019.html#platform-selection

          #  $Win2019, name: "win64_toolsetV142_VS2019", cmakeConfig: "-T v142,host=x64"},
          #  $UnixConf, os: "macos-12", name: "macos_12"}
          
          matrixJson=$(cat <<-END
          [
            $Win2022, name: "win_x86", cmakeConfig: "-A Win32 -T v143,host=x64"},
            $Win2022, name: "win64_toolsetV143_VS2022", cmakeConfig: "-T v143,host=x64"},
            $Win2019, name: "win64_toolsetV141_VS2019", cmakeConfig: "-T v141,host=x64"},
            $UnixConf, os: "ubuntu-latest", name: "ubuntu_latest"},
            $UnixConf, os: "ubuntu-20.04", name: "ubuntu20_04"},
            $UnixConf, os: "macos-latest", name: "mac_latest"},
          ]
          END)

          echo "value=${matrixJson}"
          echo "value=${matrixJson//$'\n'/}" >> $GITHUB_OUTPUT

  mybuild:
    needs: set-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config: ${{ fromJson(needs.set-matrix.outputs.matrixJson) }}
    steps:
      - uses: actions/checkout@v4
      - name: enable problem matcher
        run: |
          echo "::add-matcher::.github/problem_matcher.json"

      - name: cmake
        run: |
          cd build/

          ${{ matrix.config.prescript }}

          cmake -D NO_SPEED_TEST=1 ${{ matrix.config.cmakeConfig }} .. 
          cmake --build . ${{ matrix.config.cmakeBuildConfig }}
      
      - name: run test
        run: |
          cd build/

          echo ${{ matrix.config.bin }}
          ${{ matrix.config.bin }}
          
          echo ${{ matrix.config.testbin }}
          ${{ matrix.config.testbin }}

      - name: Copy artifact
        shell: bash
        run: |
          cd build;
          clang++ --version;
          mkdir -p deb/${{ matrix.config.name }};
          cp ${{ matrix.config.bin }} deb/${{ matrix.config.name }}
          cp ${{ matrix.config.testbin }} deb/${{ matrix.config.name }}
          cp ${{ matrix.config.lspbin }} deb/${{ matrix.config.name }}
          cp ${{ matrix.config.longrunning_bin }} deb/${{ matrix.config.name }}
       

      - uses: actions/upload-artifact@v4
        with:
          name: deen_actions_cmake_${{ github.sha }}_amd64
          path: build/deb
  

# discarded code
 
#make
#    - name: runner
#      run: |
#        bin/doorlang

#        cmake -DCMAKE_BUILD_TYPE=Release ..


          # this doesn't affect at all
          #-DCMAKE_CXX_FLAGS=-m32 -DCMAKE_EXE_LINKER_FLAGS=-m32  -DCMAKE_C_FLAGS=-m32 -DCMAKE_MODULE_LINKER_FLAGS=-m32 -DCMAKE_STATIC_LINKER_FLAGS=-m32  -DCMAKE_SHARED_LINKER_FLAGS=-m32


          # cmake -D NO_SPEED_TEST=1 ${{ matrix.config.cmakeConfig }} .. 
          ##make all
          # cmake --build . ${{ matrix.config.cmakeBuildConfig }}
          #ls -R .
      